# -*- coding: utf-8 -*-
"""Lab05_20301003.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Tnvctr6QnVuPKRJUoAUJ7dTzkoDLsR5Q
"""

class Arraystack:
  
  top = -1
  arrayStac = []
  
  def push(self,element):

    self.arrayStac.append(element)
    self.top += 1


    # if(self.top<len(self.arrayStac)-1):

      
    #   self.arrayStac[self.top] = element
    #   self.top += 1

    # else:
    #   print("No space available to Push items")

  def peek (self):
    if (self.top == -1):
      print("stack is empty")

    else:
      return self.arrayStac[self.top]


  def pop (self):

    if (self.top == -1):
      print("stack is empty ")

    else:
      temp_1 = self.arrayStac[self.top]

      self.arrayStac[self.top] = None
      self.top -= 1
      
      return temp_1

  def check_stack(self):
    if self.top == -1:
      return True
    return False

openBr = ["[","{","("]
closeBr = ["]","}",")"]
    
def check(stri):

  stack = Arraystack ()
  j=-1
  x=0

  for i in stri:
    j+=1

    if i in openBr:
        stack.push(i)
        x = j 

    elif i in closeBr:
        pos = closeBr.index(i)

        if stack.check_stack():
          print("This expression is NOT correct. ")
          return "Error at character #",j+1,closeBr[pos],"-not opened"
        stack.pop()


  if stack.check_stack():
    return  "This expression is correct."      
  else:  
    y = stack.pop()
    print("This expression is NOT correct. ")


    return "Error at character #", x+1,y,"-not closed"
    
  
    
  
# --------------------------------------------#

string = "1+(2*3/4)}"
print(string)
print(check(string))
stak = Arraystack()

class Node:

  def __init__(self,elem):


    self.elem = elem
    self.h = None



openBr = ["[","{","("]
closeBr = ["]","}",")"]


class LLStack:
  head = None

  def push(self,elem):

    if self.head == None:
      self.head = Node(elem)
    else:
      n = Node(elem)
      n.h = self.head
      self.head = n

  def pop(self):
    curnt = self.head
    self.head = self.head.h
    curnt.elem = None
    curnt.h = None

  def peek(self):
    return(self.head.elem)

  
  def check_stack(self):
    if self.head == None:
      return True
    return False


    
def check(stri):

    stak = LLStack ()
    j =-1
    x=0

    for i in stri:

      j+=1

      if i in openBr:
          stak.push(i)
          x = j 

      elif i in closeBr:
          curr = closeBr.index(i)

          if stak.check_stack():
            print("This expression is NOT correct. ")
            return "Error at character #",j+1,closeBr[curr],"-not opened"

          stak.pop()


    if stak.check_stack():
      return  "This expression is correct."

    else:  
      y = stak.pop()
      print("This expression is NOT correct. ")


      return 'Error at character #', x+1,y,'-not closed'
    
  
    
  
# --------------------------------#

string = input("Enter the String please:")
print(string)
print(check(string))
stac = LLStack()
